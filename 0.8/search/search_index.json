{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Iter8 \u00b6","title":"Home"},{"location":"#iter8","text":"","title":"Iter8"},{"location":"community/","text":"Community meetings \u00b6 Everyone is welcome to join our community meetings. They are on the 3 rd Wednesday of each month from 11:00 AM \u2013 12:00 PM EST/EDT. Here is the meeting link . View the calendar or subscribe ( Google Calendar , iCalendar file ). Feel free to bring discussion topics to the meeting. If you would like to present a demo, please drop us a note in the Iter8 Slack workspace . Our meetings are also recorded and publicly available on our YouTube channel .","title":"Community"},{"location":"community/#community-meetings","text":"Everyone is welcome to join our community meetings. They are on the 3 rd Wednesday of each month from 11:00 AM \u2013 12:00 PM EST/EDT. Here is the meeting link . View the calendar or subscribe ( Google Calendar , iCalendar file ). Feel free to bring discussion topics to the meeting. If you would like to present a demo, please drop us a note in the Iter8 Slack workspace . Our meetings are also recorded and publicly available on our YouTube channel .","title":"Community meetings"},{"location":"contributing/","text":"Overview \u00b6 Welcome! We are delighted that you want to contribute to Iter8! \ud83d\udc96 As you get started, you are in the best position to give us feedback on areas of our project that we need help with including: Problems found during setup of Iter8 Gaps in our quick start tutorial and other documentation Bugs in our test and automation scripts If anything doesn't make sense, or doesn't work when you run it, please open a bug report and let us know! Ways to Contribute \u00b6 We welcome many different types of contributions including: Tutorials Other documentation Builds, CI Tasks from which experiments are composed Bug fixes Web design Communication, social media, blog posts Reviewing pull requests Ask for Help \u00b6 The best ways to reach us with a question is to ask... On the original GitHub issue In the #development channel in the Iter8 Slack workspace During our community meetings Find an Issue \u00b6 Iter8 issues are managed here . Issued labeled good first issue have extra information to help you make your first contribution. Issues labeled help wanted are issues suitable for someone who has already submitted their first pull request and is good to move on to the second one. Sometimes there won\u2019t be any issues with these labels. That\u2019s ok! There is likely still something for you to work on. If you want to contribute but you don\u2019t know where to start or can't find a suitable issue, you can reach out to us over the Iter8 Slack workspace for help finding something to work on. Once you see an issue that you'd like to work on, please post a comment saying that you want to work on it. Something like \"I want to work on this\" is fine. Pull Request Lifecycle \u00b6 Your PR is associated with one (and infrequently, with more than one) GitHub issue . You can start the submission of your PR as soon as this issue has been created. Follow the standard GitHub fork and pull request process when creating and submitting your PR. The associated GitHub issue might need to go through design discussions and may not be ready for development. Your PR might require new tests; these new or existing tests may not yet be running successfully. At this stage, keep your PR as a draft , to signal that it is not yet ready for review. Once design discussions are complete and tests pass, convert the draft PR into a regular PR to signal that it is ready for review. Additionally, post a message in the #development Slack channel of the Iter8 Slack workspace with a link to your PR. This will expedite the review. You can expect an initial review within 1-2 days of submitting a PR, and follow up reviews (if any) to happen over 2-5 days. Use the #development Slack channel of Iter8 Slack workspace to ping/bump when the pull request is ready for further review or if it appears stalled. Iter8 releases happen frequently. Once your PR is merged, you can expect your contribution to show up live in a short amount of time at https://iter8.tools . Sign Your Commits \u00b6 Licensing is important to open source projects. It provides some assurances that the software will continue to be available based under the terms that the author(s) desired. We require that contributors sign off on commits submitted to our project's repositories. The Developer Certificate of Origin (DCO) is a way to certify that you wrote and have the right to contribute the code you are submitting to the project. Read GitHub's documentation on signing your commits . You sign-off by adding the following to your commit messages. Your sign-off must match the Git user and email associated with the commit. This is my commit message Signed-off-by: Your Name <your.name@example.com> Git has a -s command line option to do this automatically: git commit -s -m 'This is my commit message' If you forgot to do this and have not yet pushed your changes to the remote repository, you can amend your commit with the sign-off by running: git commit --amend -s MkDocs \u00b6 Iter8 documentation uses Mkdocs . The section on linking to pages and images is especially useful for Iter8 documentation authors. Serve Iter8 docs \u00b6 Pre-requisite: Python 3+. Use a Python 3 virtual environment to locally serve Iter8 docs. Run the following commands from the top-level directory of the Iter8 repo. cd mkdocs python3 -m venv .venv source .venv/bin/activate pip install -r requirements.txt mkdocs serve -s Browse http://localhost:8000 to view your local Iter8 docs. View live changes \u00b6 The overall structure of the documentation, as reflected in the nav tabs of https://iter8.tools , is located in the iter8/mkdocs/mkdocs.yml file. The markdown files for Iter8 docs are located under the iter8/mkdocs/docs folder. You will see live updates to http://localhost:8000 as you update the above files.","title":"Contributing"},{"location":"contributing/#overview","text":"Welcome! We are delighted that you want to contribute to Iter8! \ud83d\udc96 As you get started, you are in the best position to give us feedback on areas of our project that we need help with including: Problems found during setup of Iter8 Gaps in our quick start tutorial and other documentation Bugs in our test and automation scripts If anything doesn't make sense, or doesn't work when you run it, please open a bug report and let us know!","title":"Overview"},{"location":"contributing/#ways-to-contribute","text":"We welcome many different types of contributions including: Tutorials Other documentation Builds, CI Tasks from which experiments are composed Bug fixes Web design Communication, social media, blog posts Reviewing pull requests","title":"Ways to Contribute"},{"location":"contributing/#ask-for-help","text":"The best ways to reach us with a question is to ask... On the original GitHub issue In the #development channel in the Iter8 Slack workspace During our community meetings","title":"Ask for Help"},{"location":"contributing/#find-an-issue","text":"Iter8 issues are managed here . Issued labeled good first issue have extra information to help you make your first contribution. Issues labeled help wanted are issues suitable for someone who has already submitted their first pull request and is good to move on to the second one. Sometimes there won\u2019t be any issues with these labels. That\u2019s ok! There is likely still something for you to work on. If you want to contribute but you don\u2019t know where to start or can't find a suitable issue, you can reach out to us over the Iter8 Slack workspace for help finding something to work on. Once you see an issue that you'd like to work on, please post a comment saying that you want to work on it. Something like \"I want to work on this\" is fine.","title":"Find an Issue"},{"location":"contributing/#pull-request-lifecycle","text":"Your PR is associated with one (and infrequently, with more than one) GitHub issue . You can start the submission of your PR as soon as this issue has been created. Follow the standard GitHub fork and pull request process when creating and submitting your PR. The associated GitHub issue might need to go through design discussions and may not be ready for development. Your PR might require new tests; these new or existing tests may not yet be running successfully. At this stage, keep your PR as a draft , to signal that it is not yet ready for review. Once design discussions are complete and tests pass, convert the draft PR into a regular PR to signal that it is ready for review. Additionally, post a message in the #development Slack channel of the Iter8 Slack workspace with a link to your PR. This will expedite the review. You can expect an initial review within 1-2 days of submitting a PR, and follow up reviews (if any) to happen over 2-5 days. Use the #development Slack channel of Iter8 Slack workspace to ping/bump when the pull request is ready for further review or if it appears stalled. Iter8 releases happen frequently. Once your PR is merged, you can expect your contribution to show up live in a short amount of time at https://iter8.tools .","title":"Pull Request Lifecycle"},{"location":"contributing/#sign-your-commits","text":"Licensing is important to open source projects. It provides some assurances that the software will continue to be available based under the terms that the author(s) desired. We require that contributors sign off on commits submitted to our project's repositories. The Developer Certificate of Origin (DCO) is a way to certify that you wrote and have the right to contribute the code you are submitting to the project. Read GitHub's documentation on signing your commits . You sign-off by adding the following to your commit messages. Your sign-off must match the Git user and email associated with the commit. This is my commit message Signed-off-by: Your Name <your.name@example.com> Git has a -s command line option to do this automatically: git commit -s -m 'This is my commit message' If you forgot to do this and have not yet pushed your changes to the remote repository, you can amend your commit with the sign-off by running: git commit --amend -s","title":"Sign Your Commits"},{"location":"contributing/#mkdocs","text":"Iter8 documentation uses Mkdocs . The section on linking to pages and images is especially useful for Iter8 documentation authors.","title":"MkDocs"},{"location":"contributing/#serve-iter8-docs","text":"Pre-requisite: Python 3+. Use a Python 3 virtual environment to locally serve Iter8 docs. Run the following commands from the top-level directory of the Iter8 repo. cd mkdocs python3 -m venv .venv source .venv/bin/activate pip install -r requirements.txt mkdocs serve -s Browse http://localhost:8000 to view your local Iter8 docs.","title":"Serve Iter8 docs"},{"location":"contributing/#view-live-changes","text":"The overall structure of the documentation, as reflected in the nav tabs of https://iter8.tools , is located in the iter8/mkdocs/mkdocs.yml file. The markdown files for Iter8 docs are located under the iter8/mkdocs/docs folder. You will see live updates to http://localhost:8000 as you update the above files.","title":"View live changes"},{"location":"news/","text":"News and Announcements \u00b6 Nov 2021: Iter8 at ACM Symposium on Cloud Computing. Full paper here Oct 2021: New Stack blog article by Hai Huang: Progressive Delivery on OpenShift Oct 2021: Iter8 at PREVAIL conference. Video coming soon. Conference details Oct 2021: New Stack blog article by Srinivasan Parthasarathy: Validate Service-Level Objectives of REST APIs Using Iter8 Jul 2021: Blog article by Clive Cox: ML\u200c \u200cProgressive\u200c \u200cRollouts\u200c \u200cwith\u200c \u200cSeldon\u200c \u200cand\u200c \u200cIter8\u200c Jul 2021: Iter8 at Knative meetup May 2021: Iter8 at KubeCon + CloudNativeCon Europe Mar 2021: Iter8 at Knative meetup Mar 2021: Kubeflow blog article by Animesh Singh and Dan Sun: Operationalize, Scale and Infuse Trust in AI Models using KFServing Oct 2020: Medium blog article by Michael Kalantar: Automated Canary Release of Microservices on Kubernetes using Tekton and iter8 Oct 2020: Medium blog article by Kusuma Chalasani: Better Performance with kruize and iter8 for your microservices application Oct 2020: Medium blog article by Srinivasan Parthasarathy: Automated Canary Release of TensorFlow Models on Kubernetes Oct 2020: Medium blog article by Sushma Ravichandran: Iter8: Take a look at the magic under the hood Aug 2020: Medium blog article by Fabio Oliveira: Iter8: Achieving Agility with Control","title":"News"},{"location":"news/#news-and-announcements","text":"Nov 2021: Iter8 at ACM Symposium on Cloud Computing. Full paper here Oct 2021: New Stack blog article by Hai Huang: Progressive Delivery on OpenShift Oct 2021: Iter8 at PREVAIL conference. Video coming soon. Conference details Oct 2021: New Stack blog article by Srinivasan Parthasarathy: Validate Service-Level Objectives of REST APIs Using Iter8 Jul 2021: Blog article by Clive Cox: ML\u200c \u200cProgressive\u200c \u200cRollouts\u200c \u200cwith\u200c \u200cSeldon\u200c \u200cand\u200c \u200cIter8\u200c Jul 2021: Iter8 at Knative meetup May 2021: Iter8 at KubeCon + CloudNativeCon Europe Mar 2021: Iter8 at Knative meetup Mar 2021: Kubeflow blog article by Animesh Singh and Dan Sun: Operationalize, Scale and Infuse Trust in AI Models using KFServing Oct 2020: Medium blog article by Michael Kalantar: Automated Canary Release of Microservices on Kubernetes using Tekton and iter8 Oct 2020: Medium blog article by Kusuma Chalasani: Better Performance with kruize and iter8 for your microservices application Oct 2020: Medium blog article by Srinivasan Parthasarathy: Automated Canary Release of TensorFlow Models on Kubernetes Oct 2020: Medium blog article by Sushma Ravichandran: Iter8: Take a look at the magic under the hood Aug 2020: Medium blog article by Fabio Oliveira: Iter8: Achieving Agility with Control","title":"News and Announcements"},{"location":"roadmap/","text":"Roadmap \u00b6 Examples for experimenting inside K8s A/B(/n) testing example Ability to run Iter8 experiments as a step in CI/CD/GitOps pipelines Auto triggering experiments read-external-metrics task recommend-traffic-split task Ability to run multiple loops of an experiment Iter8 experiments & progressive delivery for multi-cluster and edge cloud","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"Examples for experimenting inside K8s A/B(/n) testing example Ability to run Iter8 experiments as a step in CI/CD/GitOps pipelines Auto triggering experiments read-external-metrics task recommend-traffic-split task Ability to run multiple loops of an experiment Iter8 experiments & progressive delivery for multi-cluster and edge cloud","title":"Roadmap"},{"location":"getting-started/concepts/","text":"What is Iter8? \u00b6 Kubernetes release engineering toolkit built for DevOps, MLOps, SRE and data science teams. What is an Iter8 experiment? \u00b6 Iter8 experiments make it simple to collect performance and business metrics for Kubernetes apps and ML models, assess and compare multiple app/ML model versions, safely rollout winning versions, and maximize business value with each release. Example \u00b6 The following picture illustrates an Iter8 experiment that performs load testing with SLO validation of a gRPC service. Experiment chart \u00b6 In order to enable reuse, Iter8 experiments are templated and packaged as specialized Helm charts . Experiment charts can be combined with values to generate experiments.yaml files that provide fully defined experiment specifications. Iter8 Hub \u00b6 Iter8 Hub is a specific location within in the Iter8 GitHub repo that hosts several pre-packaged and reusable charts. These charts enable to you to launch powerful release engineering experiments in a matter of seconds. Their usage is described in depth in various Iter8 tutorials . Features at a glance \u00b6 Load testing with SLOs Iter8 experiments can generate requests for HTTP and gRPC services, collect built-in latency and error-related metrics, and validate SLOs. A/B(/n) testing Grow your business with every release. Iter8 experiments can compare multiple versions based on business value and promote a winner. Simple to use Get started with Iter8 in seconds using pre-packaged experiment charts. Run Iter8 experiments locally, in a container, inside Kubernetes, or inside your CI/CD/GitOps pipelines. Awesome integrations Use with any app, serverless, or ML framework. Iter8 works with Kubernetes deployments, statefulsets, Knative services, KServe/Seldon ML deployments, or custom Kubernetes resource types. Implementation \u00b6 Iter8 is implemented as a go module and comes with a command line interface (CLI) that enables rapid experimentation.","title":"Concepts"},{"location":"getting-started/concepts/#what-is-iter8","text":"Kubernetes release engineering toolkit built for DevOps, MLOps, SRE and data science teams.","title":"What is Iter8?"},{"location":"getting-started/concepts/#what-is-an-iter8-experiment","text":"Iter8 experiments make it simple to collect performance and business metrics for Kubernetes apps and ML models, assess and compare multiple app/ML model versions, safely rollout winning versions, and maximize business value with each release.","title":"What is an Iter8 experiment?"},{"location":"getting-started/concepts/#example","text":"The following picture illustrates an Iter8 experiment that performs load testing with SLO validation of a gRPC service.","title":"Example"},{"location":"getting-started/concepts/#experiment-chart","text":"In order to enable reuse, Iter8 experiments are templated and packaged as specialized Helm charts . Experiment charts can be combined with values to generate experiments.yaml files that provide fully defined experiment specifications.","title":"Experiment chart"},{"location":"getting-started/concepts/#iter8-hub","text":"Iter8 Hub is a specific location within in the Iter8 GitHub repo that hosts several pre-packaged and reusable charts. These charts enable to you to launch powerful release engineering experiments in a matter of seconds. Their usage is described in depth in various Iter8 tutorials .","title":"Iter8 Hub"},{"location":"getting-started/concepts/#features-at-a-glance","text":"Load testing with SLOs Iter8 experiments can generate requests for HTTP and gRPC services, collect built-in latency and error-related metrics, and validate SLOs. A/B(/n) testing Grow your business with every release. Iter8 experiments can compare multiple versions based on business value and promote a winner. Simple to use Get started with Iter8 in seconds using pre-packaged experiment charts. Run Iter8 experiments locally, in a container, inside Kubernetes, or inside your CI/CD/GitOps pipelines. Awesome integrations Use with any app, serverless, or ML framework. Iter8 works with Kubernetes deployments, statefulsets, Knative services, KServe/Seldon ML deployments, or custom Kubernetes resource types.","title":"Features at a glance"},{"location":"getting-started/concepts/#implementation","text":"Iter8 is implemented as a go module and comes with a command line interface (CLI) that enables rapid experimentation.","title":"Implementation"},{"location":"getting-started/help/","text":"Get Help \u00b6 Read Iter8 docs . Join the Iter8 Slack workspace . File an issue or start a discussion on the Iter8 GitHub repo . Attend our community meetings!","title":"Get help"},{"location":"getting-started/help/#get-help","text":"Read Iter8 docs . Join the Iter8 Slack workspace . File an issue or start a discussion on the Iter8 GitHub repo . Attend our community meetings!","title":"Get Help"},{"location":"getting-started/install/","text":"Install Iter8 \u00b6 Brew Binaries Source Go 1.16+ Install the latest stable release of the Iter8 CLI using brew as follows. brew tap iter8-tools/iter8 brew install iter8 Install a specific version You can install the latest stable release of the Iter8 CLI with specific major and minor version numbers. For example, the following command installs the latest stable release of the Iter8 CLI with major 0 and minor 8 . brew tap iter8-tools/iter8 brew install iter8@0.8 Pre-compiled Iter8 binaries for many platforms are available here . Uncompress the iter8-X-Y.tar.gz archive for your platform, and move the iter8 binary to any folder in your PATH. Build Iter8 from source as follows. Go 1.16+ is a pre-requisite. # you can replace master with a specific tag such as v0.8.29 export REF = master https://github.com/iter8-tools/iter8.git?ref = $REF cd iter8 make install Install the latest stable release of the Iter8 CLI using go 1.16+ as follows. go install github.com/iter8-tools/iter8@latest You can now run iter8 (from your gopath bin/ directory) Install a specific version You can also install Iter8 CLI with a specific tag. For example, the following command installs version 0.8.29 of the Iter8 CLI. go install github.com/iter8-tools/iter8@v0.8.29","title":"Install Iter8"},{"location":"getting-started/install/#install-iter8","text":"Brew Binaries Source Go 1.16+ Install the latest stable release of the Iter8 CLI using brew as follows. brew tap iter8-tools/iter8 brew install iter8 Install a specific version You can install the latest stable release of the Iter8 CLI with specific major and minor version numbers. For example, the following command installs the latest stable release of the Iter8 CLI with major 0 and minor 8 . brew tap iter8-tools/iter8 brew install iter8@0.8 Pre-compiled Iter8 binaries for many platforms are available here . Uncompress the iter8-X-Y.tar.gz archive for your platform, and move the iter8 binary to any folder in your PATH. Build Iter8 from source as follows. Go 1.16+ is a pre-requisite. # you can replace master with a specific tag such as v0.8.29 export REF = master https://github.com/iter8-tools/iter8.git?ref = $REF cd iter8 make install Install the latest stable release of the Iter8 CLI using go 1.16+ as follows. go install github.com/iter8-tools/iter8@latest You can now run iter8 (from your gopath bin/ directory) Install a specific version You can also install Iter8 CLI with a specific tag. For example, the following command installs version 0.8.29 of the Iter8 CLI. go install github.com/iter8-tools/iter8@v0.8.29","title":"Install Iter8"},{"location":"getting-started/your-first-experiment/","text":"Your First Experiment \u00b6 Load Test an HTTP Service with SLOs Get started with your first Iter8 experiment by load testing an HTTP service and validating its latency and error-related service level objectives (SLOs). 1. Install Iter8 \u00b6 Brew Binaries Source Go 1.16+ Install the latest stable release of the Iter8 CLI using brew as follows. brew tap iter8-tools/iter8 brew install iter8 Pre-compiled Iter8 binaries for many platforms are available here . Uncompress the iter8-X-Y.tar.gz archive for your platform, and move the iter8 binary to any folder in your PATH. Build Iter8 from source as follows. Go 1.16+ is a pre-requisite. # you can replace master with a specific tag such as v0.8.29 export REF = master https://github.com/iter8-tools/iter8.git?ref = $REF cd iter8 make install Install the latest stable release of the Iter8 CLI using go 1.16+ as follows. go install github.com/iter8-tools/iter8@latest You can now run iter8 (from your gopath bin/ directory) 2. Download experiment chart \u00b6 Download the load-test-http experiment chart from Iter8 hub as follows. iter8 hub -e load-test-http cd load-test-http 3. Run experiment \u00b6 We will load test and validate the HTTP service whose URL is https://example.com . We will specify that the error rate must be 0, the mean latency must be under 50 msec, the 90 th percentile latency must be under 100 msec, and the 97.5 th percentile latency must be under 200 msec. Run the experiment as follows. iter8 run --set url = https://example.com \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 The iter8 run command combines an experiment chart with the supplied values to generate the experiment.yaml file, runs the experiment, and writes results into the result.yaml file. Sample output from iter8 run INFO [ 2021 -12-14 10 :23:26 ] starting experiment run INFO [ 2021 -12-14 10 :23:26 ] task 1 : gen-load-and-collect-metrics-http : started INFO [ 2021 -12-14 10 :23:39 ] task 1 : gen-load-and-collect-metrics-http : completed INFO [ 2021 -12-14 10 :23:39 ] task 2 : assess-app-versions : started INFO [ 2021 -12-14 10 :23:39 ] task 2 : assess-app-versions : completed INFO [ 2021 -12-14 10 :23:39 ] experiment completed successfully Iter8 and Helm If you are familiar with Helm , you probably noticed that the load-test-http folder resembles a Helm chart. This is because, Iter8 experiment charts are Helm charts under the covers. The iter8 run command used above combines the experiment chart with values to generate the experiments.yaml file, much like how Helm charts can be combined with values to produce Kubernetes manifests. 4. Assert outcomes \u00b6 Assert that the experiment completed without any failures and SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos The iter8 assert subcommand asserts if experiment result satisfies the specified conditions. If assert conditions are satisfied, it exits with code 0 , and exits with code 1 otherwise. Assertions are especially useful within CI/CD/GitOps pipelines. Sample output from iter8 assert INFO [ 2021 -11-10 09 :33:12 ] experiment completed INFO [ 2021 -11-10 09 :33:12 ] experiment has no failure INFO [ 2021 -11-10 09 :33:12 ] SLOs are satisfied INFO [ 2021 -11-10 09 :33:12 ] all conditions were satisfied 5. View report \u00b6 View a report of the experiment in HTML or text formats as follows. HTML Text iter8 report -o html > report.html # open report.html with a browser. In MacOS, you can use the command: # open report.html The HTML report looks like this iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No failed tasks: true Total number of tasks: 2 Number of completed tasks: 2 Whether or not service level objectives ( SLOs ) are satisfied: ************************************************************* SLO Conditions | Satisfied -------------- | --------- built-in/http-latency-mean ( msec ) < = 100 | true built-in/http-latency-p95 ( msec ) < = 150 | true Latest observed values for metrics: *********************************** Metric | value ------- | ----- built-in/http-error-count | 0 .00 built-in/http-error-rate | 0 .00 built-in/http-latency-max ( msec ) | 186 .56 built-in/http-latency-mean ( msec ) | 11 .25 built-in/http-latency-min ( msec ) | 4 .05 built-in/http-latency-p50 ( msec ) | 6 .59 built-in/http-latency-p75 ( msec ) | 7 .79 built-in/http-latency-p90 ( msec ) | 9 .23 built-in/http-latency-p95 ( msec ) | 10 .00 built-in/http-latency-p99 ( msec ) | 183 .94 built-in/http-latency-p99.9 ( msec ) | 186 .30 built-in/http-latency-stddev ( msec ) | 28 .01 built-in/http-request-count | 200 .00 Congratulations! You completed your first Iter8 experiment. Useful variations of this experiment Control the load characteristics by setting the number of queries/duration of the HTTP load test experiment, the number of queries sent per second, and the number of parallel connections used to send requests. HTTP services with POST endpoints may accept payloads. Send various types of content as payload during the HTTP load test experiment. Learn more about the built-in metrics that are collected and the SLOs that are validated during the HTTP load test experiment . The values.yaml file in the experiment chart folder documents all the values that can be supplied during the experiment.","title":"Your first experiment"},{"location":"getting-started/your-first-experiment/#your-first-experiment","text":"Load Test an HTTP Service with SLOs Get started with your first Iter8 experiment by load testing an HTTP service and validating its latency and error-related service level objectives (SLOs).","title":"Your First Experiment"},{"location":"getting-started/your-first-experiment/#1-install-iter8","text":"Brew Binaries Source Go 1.16+ Install the latest stable release of the Iter8 CLI using brew as follows. brew tap iter8-tools/iter8 brew install iter8 Pre-compiled Iter8 binaries for many platforms are available here . Uncompress the iter8-X-Y.tar.gz archive for your platform, and move the iter8 binary to any folder in your PATH. Build Iter8 from source as follows. Go 1.16+ is a pre-requisite. # you can replace master with a specific tag such as v0.8.29 export REF = master https://github.com/iter8-tools/iter8.git?ref = $REF cd iter8 make install Install the latest stable release of the Iter8 CLI using go 1.16+ as follows. go install github.com/iter8-tools/iter8@latest You can now run iter8 (from your gopath bin/ directory)","title":"1. Install Iter8"},{"location":"getting-started/your-first-experiment/#2-download-experiment-chart","text":"Download the load-test-http experiment chart from Iter8 hub as follows. iter8 hub -e load-test-http cd load-test-http","title":"2. Download experiment chart"},{"location":"getting-started/your-first-experiment/#3-run-experiment","text":"We will load test and validate the HTTP service whose URL is https://example.com . We will specify that the error rate must be 0, the mean latency must be under 50 msec, the 90 th percentile latency must be under 100 msec, and the 97.5 th percentile latency must be under 200 msec. Run the experiment as follows. iter8 run --set url = https://example.com \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 The iter8 run command combines an experiment chart with the supplied values to generate the experiment.yaml file, runs the experiment, and writes results into the result.yaml file. Sample output from iter8 run INFO [ 2021 -12-14 10 :23:26 ] starting experiment run INFO [ 2021 -12-14 10 :23:26 ] task 1 : gen-load-and-collect-metrics-http : started INFO [ 2021 -12-14 10 :23:39 ] task 1 : gen-load-and-collect-metrics-http : completed INFO [ 2021 -12-14 10 :23:39 ] task 2 : assess-app-versions : started INFO [ 2021 -12-14 10 :23:39 ] task 2 : assess-app-versions : completed INFO [ 2021 -12-14 10 :23:39 ] experiment completed successfully Iter8 and Helm If you are familiar with Helm , you probably noticed that the load-test-http folder resembles a Helm chart. This is because, Iter8 experiment charts are Helm charts under the covers. The iter8 run command used above combines the experiment chart with values to generate the experiments.yaml file, much like how Helm charts can be combined with values to produce Kubernetes manifests.","title":"3. Run experiment"},{"location":"getting-started/your-first-experiment/#4-assert-outcomes","text":"Assert that the experiment completed without any failures and SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos The iter8 assert subcommand asserts if experiment result satisfies the specified conditions. If assert conditions are satisfied, it exits with code 0 , and exits with code 1 otherwise. Assertions are especially useful within CI/CD/GitOps pipelines. Sample output from iter8 assert INFO [ 2021 -11-10 09 :33:12 ] experiment completed INFO [ 2021 -11-10 09 :33:12 ] experiment has no failure INFO [ 2021 -11-10 09 :33:12 ] SLOs are satisfied INFO [ 2021 -11-10 09 :33:12 ] all conditions were satisfied","title":"4. Assert outcomes"},{"location":"getting-started/your-first-experiment/#5-view-report","text":"View a report of the experiment in HTML or text formats as follows. HTML Text iter8 report -o html > report.html # open report.html with a browser. In MacOS, you can use the command: # open report.html The HTML report looks like this iter8 report The text report looks like this Experiment summary: ******************* Experiment completed: true No failed tasks: true Total number of tasks: 2 Number of completed tasks: 2 Whether or not service level objectives ( SLOs ) are satisfied: ************************************************************* SLO Conditions | Satisfied -------------- | --------- built-in/http-latency-mean ( msec ) < = 100 | true built-in/http-latency-p95 ( msec ) < = 150 | true Latest observed values for metrics: *********************************** Metric | value ------- | ----- built-in/http-error-count | 0 .00 built-in/http-error-rate | 0 .00 built-in/http-latency-max ( msec ) | 186 .56 built-in/http-latency-mean ( msec ) | 11 .25 built-in/http-latency-min ( msec ) | 4 .05 built-in/http-latency-p50 ( msec ) | 6 .59 built-in/http-latency-p75 ( msec ) | 7 .79 built-in/http-latency-p90 ( msec ) | 9 .23 built-in/http-latency-p95 ( msec ) | 10 .00 built-in/http-latency-p99 ( msec ) | 183 .94 built-in/http-latency-p99.9 ( msec ) | 186 .30 built-in/http-latency-stddev ( msec ) | 28 .01 built-in/http-request-count | 200 .00 Congratulations! You completed your first Iter8 experiment. Useful variations of this experiment Control the load characteristics by setting the number of queries/duration of the HTTP load test experiment, the number of queries sent per second, and the number of parallel connections used to send requests. HTTP services with POST endpoints may accept payloads. Send various types of content as payload during the HTTP load test experiment. Learn more about the built-in metrics that are collected and the SLOs that are validated during the HTTP load test experiment . The values.yaml file in the experiment chart folder documents all the values that can be supplied during the experiment.","title":"5. View report"},{"location":"tutorials/abn/","text":"A/B(/n) Testing \u00b6 A/B(/n) testing compares two or more versions, generally in terms of a business metric (reward), and finds the winning version that performs best in terms of the reward. v0.7 Examples \u00b6 A/B testing with KServe ML models - I . A/B testing with KServe ML models - II . A/B testing with Seldon ML models . A/B testing with Knative services . A/B testing with Istio . A/B testing with Linkerd .","title":"A/B(/n) testing"},{"location":"tutorials/abn/#abn-testing","text":"A/B(/n) testing compares two or more versions, generally in terms of a business metric (reward), and finds the winning version that performs best in terms of the reward.","title":"A/B(/n) Testing"},{"location":"tutorials/abn/#v07-examples","text":"A/B testing with KServe ML models - I . A/B testing with KServe ML models - II . A/B testing with Seldon ML models . A/B testing with Knative services . A/B testing with Istio . A/B testing with Linkerd .","title":"v0.7 Examples"},{"location":"tutorials/chaos/","text":"Chaos Testing with SLOs \u00b6 Chaos testing pushes app or its environment to the break and helps reveal weaknesses in the app configuration. Iter8 experiments can be used to discover if the app can continue to satisfy SLOs even in the midst of chaos. v0.7 Examples \u00b6 Chaos testing with SLOs .","title":"Chaos testing with SLOs"},{"location":"tutorials/chaos/#chaos-testing-with-slos","text":"Chaos testing pushes app or its environment to the break and helps reveal weaknesses in the app configuration. Iter8 experiments can be used to discover if the app can continue to satisfy SLOs even in the midst of chaos.","title":"Chaos Testing with SLOs"},{"location":"tutorials/chaos/#v07-examples","text":"Chaos testing with SLOs .","title":"v0.7 Examples"},{"location":"tutorials/gradual-traffic-shifting/","text":"Gradual Traffic Shifting \u00b6 Gradual traffic shift is a type of canary rollout, where you gradually shift traffic towards the winning version in the experiment over multiple iterations. v0.7 Examples \u00b6 KServe ML models . Seldon ML models . Knative services . Istio .","title":"Gradual traffic shifting"},{"location":"tutorials/gradual-traffic-shifting/#gradual-traffic-shifting","text":"Gradual traffic shift is a type of canary rollout, where you gradually shift traffic towards the winning version in the experiment over multiple iterations.","title":"Gradual Traffic Shifting"},{"location":"tutorials/gradual-traffic-shifting/#v07-examples","text":"KServe ML models . Seldon ML models . Knative services . Istio .","title":"v0.7 Examples"},{"location":"tutorials/mirroring/","text":"Mirroring \u00b6 Traffic mirroring or shadowing enables experimenting with a dark launched version with zero-impact on end-users. Mirrored traffic is a replica of the real user requests that is routed to the dark version. Metrics are collected and evaluated for the dark version, but responses from the dark version are ignored. v0.6 Examples \u00b6 Mirroring with Knative services and Istio .","title":"Mirroring"},{"location":"tutorials/mirroring/#mirroring","text":"Traffic mirroring or shadowing enables experimenting with a dark launched version with zero-impact on end-users. Mirrored traffic is a replica of the real user requests that is routed to the dark version. Metrics are collected and evaluated for the dark version, but responses from the dark version are ignored.","title":"Mirroring"},{"location":"tutorials/mirroring/#v06-examples","text":"Mirroring with Knative services and Istio .","title":"v0.6 Examples"},{"location":"tutorials/session-affinity/","text":"Session affinity \u00b6 Session affinity ensures that the version to which a particular user's request is routed remains consistent throughout the duration of the experiment. v0.7 Examples \u00b6 KServe ML models .","title":"Session affinity"},{"location":"tutorials/session-affinity/#session-affinity","text":"Session affinity ensures that the version to which a particular user's request is routed remains consistent throughout the duration of the experiment.","title":"Session affinity"},{"location":"tutorials/session-affinity/#v07-examples","text":"KServe ML models .","title":"v0.7 Examples"},{"location":"tutorials/slos-with-prometheus/","text":"SLOs with Prometheus \u00b6 Metrics collection using Prometheus is a common feature provided many app frameworks, service meshes, and ingress technologies. Iter8 can query metrics from Prometheus and perform SLO validation based on metric values. v0.7 Examples \u00b6 KServe ML models Seldon ML models Istio Linkerd","title":"SLOs with Prometheus"},{"location":"tutorials/slos-with-prometheus/#slos-with-prometheus","text":"Metrics collection using Prometheus is a common feature provided many app frameworks, service meshes, and ingress technologies. Iter8 can query metrics from Prometheus and perform SLO validation based on metric values.","title":"SLOs with Prometheus"},{"location":"tutorials/slos-with-prometheus/#v07-examples","text":"KServe ML models Seldon ML models Istio Linkerd","title":"v0.7 Examples"},{"location":"tutorials/traffic-percent/","text":"Percentage-based Traffic Split \u00b6 Perform an experiment while splitting the traffic between the stable and canary versions of an app. The traffic splitting is percentage-based. v0.7 Examples \u00b6 KServe ML models . Knative services . Istio .","title":"Percentage traffic-split"},{"location":"tutorials/traffic-percent/#percentage-based-traffic-split","text":"Perform an experiment while splitting the traffic between the stable and canary versions of an app. The traffic splitting is percentage-based.","title":"Percentage-based Traffic Split"},{"location":"tutorials/traffic-percent/#v07-examples","text":"KServe ML models . Knative services . Istio .","title":"v0.7 Examples"},{"location":"tutorials/load-test-grpc/overview/","text":"Overview \u00b6 Load Testing and SLO Validation for gRPC Services Iter8's gRPC load testing and SLO validation experiments can generate requests for gRPC services, collect built-in latency and error-related metrics, and validate service-level objectives (SLOs). This experiment can work with all four kinds of gRPC service methods, namely, unary, server-streaming, client-streaming, and bidirectional streaming. Use-case: Continuous delivery (CD) of gRPC services is a motivating use-case for this experiment. If the gRPC service satisfies the SLOs specified in the experiment, it may be safely rolled out (for example, from a test environment to a production environment). This experiment is illustrated in the figure below. Examples \u00b6 Load test a unary gRPC service and validate SLOs . Use an Iter8 experiment to load test a unary gRPC service and validate latency and error-related service level objectives (SLOs). Community examples \u00b6 These samples are contributed and maintained by members of the Iter8 community. Dear Iter8 community Community examples may become outdated. If you find that something is not working, lend a helping hand and fix it in a PR. More examples are always welcome. Knative \u00b6 Load test a Knative gRPC service Use an Iter8 experiment to load test a Knative gRPC service and validate latency and error-related service level objectives (SLOs).","title":"Overview"},{"location":"tutorials/load-test-grpc/overview/#overview","text":"Load Testing and SLO Validation for gRPC Services Iter8's gRPC load testing and SLO validation experiments can generate requests for gRPC services, collect built-in latency and error-related metrics, and validate service-level objectives (SLOs). This experiment can work with all four kinds of gRPC service methods, namely, unary, server-streaming, client-streaming, and bidirectional streaming. Use-case: Continuous delivery (CD) of gRPC services is a motivating use-case for this experiment. If the gRPC service satisfies the SLOs specified in the experiment, it may be safely rolled out (for example, from a test environment to a production environment). This experiment is illustrated in the figure below.","title":"Overview"},{"location":"tutorials/load-test-grpc/overview/#examples","text":"Load test a unary gRPC service and validate SLOs . Use an Iter8 experiment to load test a unary gRPC service and validate latency and error-related service level objectives (SLOs).","title":"Examples"},{"location":"tutorials/load-test-grpc/overview/#community-examples","text":"These samples are contributed and maintained by members of the Iter8 community. Dear Iter8 community Community examples may become outdated. If you find that something is not working, lend a helping hand and fix it in a PR. More examples are always welcome.","title":"Community examples"},{"location":"tutorials/load-test-grpc/overview/#knative","text":"Load test a Knative gRPC service Use an Iter8 experiment to load test a Knative gRPC service and validate latency and error-related service level objectives (SLOs).","title":"Knative"},{"location":"tutorials/load-test-grpc/unary/","text":"Unary gRPC Service \u00b6 Load Test a unary gRPC Service with SLOs Load testing a unary gRPC service and validate its latency and error-related service level objectives (SLOs). Before you begin Install Iter8 . 1. Run sample app \u00b6 Choose a language, and follow the linked instructions to run the gRPC sample app. Update step is not needed The linked instructions show how to update the app, and re-run the updated app. For the purpose of this tutorial, there is no need to update and re-run. Running the basic service is sufficient. C# C++ Dart Go Java Kotlin Node Objective-C PHP Python Ruby Run the C# gRPC app . Run the C++ gRPC app . Run the Dart gRPC app . Run the Go gRPC app . Run the Java gRPC app . Run the Kotlin gRPC app . Run the Node gRPC app . Run the Objective-C gRPC app . Run the PHP gRPC app . Run the Python gRPC app . Run the Ruby gRPC app . 2. Download experiment chart \u00b6 iter8 hub -e load-test-grpc cd load-test-grpc 3. Run experiment \u00b6 We will load test and validate the gRPC sample service with host 127.0.0.1:50051 , fully-qualified method name helloworld.Greeter.SayHello , and defined by the Protocol Buffer file located at the protoURL . We will specify that the gRPC requests made by the Iter8 experiment will include {'name': 'frodo'} as the data, serialized in the protobuf format. We will also specify that the error rate must be 0, the mean latency must be under 50 msec, the 90 th percentile latency must be under 100 msec, and the 97.5 th percentile latency must be under 200 msec. Run the experiment as follows. iter8 run --set-string host = \"127.0.0.1:50051\" \\ --set-string call = \"helloworld.Greeter.SayHello\" \\ --set-string protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data.name = \"frodo\" \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency/mean = 50 \\ --set SLOs.latency/p90 = 100 \\ --set SLOs.latency/p '97\\.5' = 200 Assert experiment outcomes and view reports as described in the quick start tutorial . The HTML report looks like this The text report looks like this Experiment summary: ******************* Experiment completed: true No failed tasks: true Total number of tasks: 2 Number of completed tasks: 2 Whether or not service level objectives ( SLOs ) are satisfied: ************************************************************* SLO Conditions | Satisfied -------------- | --------- built-in/grpc-error-rate < = 0 | true built-in/grpc-latency/mean ( msec ) < = 50 | true built-in/grpc-latency/p90 ( msec ) < = 100 | true built-in/grpc-latency/p97.5 ( msec ) < = 200 | true Latest observed values for metrics: *********************************** Metric | value ------- | ----- built-in/grpc-error-count | 0 .00 built-in/grpc-error-rate | 0 .00 built-in/grpc-latency/mean ( msec ) | 1 .51 built-in/grpc-latency/p90 ( msec ) | 3 .00 built-in/grpc-latency/p97.5 ( msec ) | 4 .00 built-in/grpc-request-count | 200 .00","title":"Unary"},{"location":"tutorials/load-test-grpc/unary/#unary-grpc-service","text":"Load Test a unary gRPC Service with SLOs Load testing a unary gRPC service and validate its latency and error-related service level objectives (SLOs). Before you begin Install Iter8 .","title":"Unary gRPC Service"},{"location":"tutorials/load-test-grpc/unary/#1-run-sample-app","text":"Choose a language, and follow the linked instructions to run the gRPC sample app. Update step is not needed The linked instructions show how to update the app, and re-run the updated app. For the purpose of this tutorial, there is no need to update and re-run. Running the basic service is sufficient. C# C++ Dart Go Java Kotlin Node Objective-C PHP Python Ruby Run the C# gRPC app . Run the C++ gRPC app . Run the Dart gRPC app . Run the Go gRPC app . Run the Java gRPC app . Run the Kotlin gRPC app . Run the Node gRPC app . Run the Objective-C gRPC app . Run the PHP gRPC app . Run the Python gRPC app . Run the Ruby gRPC app .","title":"1. Run sample app"},{"location":"tutorials/load-test-grpc/unary/#2-download-experiment-chart","text":"iter8 hub -e load-test-grpc cd load-test-grpc","title":"2. Download experiment chart"},{"location":"tutorials/load-test-grpc/unary/#3-run-experiment","text":"We will load test and validate the gRPC sample service with host 127.0.0.1:50051 , fully-qualified method name helloworld.Greeter.SayHello , and defined by the Protocol Buffer file located at the protoURL . We will specify that the gRPC requests made by the Iter8 experiment will include {'name': 'frodo'} as the data, serialized in the protobuf format. We will also specify that the error rate must be 0, the mean latency must be under 50 msec, the 90 th percentile latency must be under 100 msec, and the 97.5 th percentile latency must be under 200 msec. Run the experiment as follows. iter8 run --set-string host = \"127.0.0.1:50051\" \\ --set-string call = \"helloworld.Greeter.SayHello\" \\ --set-string protoURL = \"https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto\" \\ --set data.name = \"frodo\" \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency/mean = 50 \\ --set SLOs.latency/p90 = 100 \\ --set SLOs.latency/p '97\\.5' = 200 Assert experiment outcomes and view reports as described in the quick start tutorial . The HTML report looks like this The text report looks like this Experiment summary: ******************* Experiment completed: true No failed tasks: true Total number of tasks: 2 Number of completed tasks: 2 Whether or not service level objectives ( SLOs ) are satisfied: ************************************************************* SLO Conditions | Satisfied -------------- | --------- built-in/grpc-error-rate < = 0 | true built-in/grpc-latency/mean ( msec ) < = 50 | true built-in/grpc-latency/p90 ( msec ) < = 100 | true built-in/grpc-latency/p97.5 ( msec ) < = 200 | true Latest observed values for metrics: *********************************** Metric | value ------- | ----- built-in/grpc-error-count | 0 .00 built-in/grpc-error-rate | 0 .00 built-in/grpc-latency/mean ( msec ) | 1 .51 built-in/grpc-latency/p90 ( msec ) | 3 .00 built-in/grpc-latency/p97.5 ( msec ) | 4 .00 built-in/grpc-request-count | 200 .00","title":"3. Run experiment"},{"location":"tutorials/load-test-grpc/community/knative/loadtest/","text":"Load test a Knative gRPC service \u00b6 Load test a Knative gRPC Service and validate SLOs Use an Iter8 experiment to load test a Knative gRPC service and validate latency and error-related service level objectives (SLOs). Use-case: Continuous delivery (CD) of gRPC services is a motivating use-case for this experiment. If the gRPC service satisfies the SLOs specified in the experiment, it may be safely rolled out (for example, from a test environment to a production environment). This experiment is illustrated in the figure below. Before you begin Install Iter8 . Install Knative and deploy your first Knative Service . As noted at the end of the Knative tutorial, when you curl the Knative service, curl http://hello.default.127.0.0.1.sslip.io you should see the expected output as follows. Hello World! Update the Knative service deployed above to a gRPC service as follows. kn service update hello \\ --image docker.io/grpc/java-example-hostname:latest \\ --port 50051 \\ --revision-name = grpc 1. Download experiment chart \u00b6 Download the load-test-grpc experiment chart from Iter8 hub as follows. iter8 hub -e load-test-grpc cd load-test-grpc 2. Run experiment \u00b6 We will load test and validate the Knative gRPC service with host:port hello.default.127.0.0.1.sslip.io:50051 , under the package helloworld , with name Greeter and method SayHello . In this example, we specify the URL where the protobuf file defining this service is located ( protoURL ). However, this service supports reflection, and hence, the iter8 run command would work even without specifying protoURL . We will also specify that the error rate must be 0 (no errors), mean latency must be under 400 msec, 90 th percentile tail latency must be under 500 msec, and 97.5 th tail latency must be under 600 msec. iter8 run --set-string host = \"hello.default.127.0.0.1.sslip.io:50051\" \\ --set-string call = \"helloworld.Greeter.SayHello\" \\ --set-string protoURL = \"https://raw.githubusercontent.com/grpc/grpc-java/master/examples/example-hostname/src/main/proto/helloworld/helloworld.proto\" --set data.name = \"frodo\" \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency/mean = 400 \\ --set SLOs.latency/p90 = 500 \\ --set SLOs.latency/p '97\\.5' = 600 3. Assert outcomes \u00b6 Assert that the experiment completed without any failures and SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos 4. View report \u00b6 View a report of the experiment in HTML or text formats as follows. HTML Text iter8 report -o html > report.html # open report.html with a browser. In MacOS, you can use the command: # open report.html iter8 report -o text Useful variations of this experiment The values.yaml file in the experiment chart folder documents all the values that can be supplied during the experiment.","title":"gRPC Service"},{"location":"tutorials/load-test-grpc/community/knative/loadtest/#load-test-a-knative-grpc-service","text":"Load test a Knative gRPC Service and validate SLOs Use an Iter8 experiment to load test a Knative gRPC service and validate latency and error-related service level objectives (SLOs). Use-case: Continuous delivery (CD) of gRPC services is a motivating use-case for this experiment. If the gRPC service satisfies the SLOs specified in the experiment, it may be safely rolled out (for example, from a test environment to a production environment). This experiment is illustrated in the figure below. Before you begin Install Iter8 . Install Knative and deploy your first Knative Service . As noted at the end of the Knative tutorial, when you curl the Knative service, curl http://hello.default.127.0.0.1.sslip.io you should see the expected output as follows. Hello World! Update the Knative service deployed above to a gRPC service as follows. kn service update hello \\ --image docker.io/grpc/java-example-hostname:latest \\ --port 50051 \\ --revision-name = grpc","title":"Load test a Knative gRPC service"},{"location":"tutorials/load-test-grpc/community/knative/loadtest/#1-download-experiment-chart","text":"Download the load-test-grpc experiment chart from Iter8 hub as follows. iter8 hub -e load-test-grpc cd load-test-grpc","title":"1. Download experiment chart"},{"location":"tutorials/load-test-grpc/community/knative/loadtest/#2-run-experiment","text":"We will load test and validate the Knative gRPC service with host:port hello.default.127.0.0.1.sslip.io:50051 , under the package helloworld , with name Greeter and method SayHello . In this example, we specify the URL where the protobuf file defining this service is located ( protoURL ). However, this service supports reflection, and hence, the iter8 run command would work even without specifying protoURL . We will also specify that the error rate must be 0 (no errors), mean latency must be under 400 msec, 90 th percentile tail latency must be under 500 msec, and 97.5 th tail latency must be under 600 msec. iter8 run --set-string host = \"hello.default.127.0.0.1.sslip.io:50051\" \\ --set-string call = \"helloworld.Greeter.SayHello\" \\ --set-string protoURL = \"https://raw.githubusercontent.com/grpc/grpc-java/master/examples/example-hostname/src/main/proto/helloworld/helloworld.proto\" --set data.name = \"frodo\" \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency/mean = 400 \\ --set SLOs.latency/p90 = 500 \\ --set SLOs.latency/p '97\\.5' = 600","title":"2. Run experiment"},{"location":"tutorials/load-test-grpc/community/knative/loadtest/#3-assert-outcomes","text":"Assert that the experiment completed without any failures and SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos","title":"3. Assert outcomes"},{"location":"tutorials/load-test-grpc/community/knative/loadtest/#4-view-report","text":"View a report of the experiment in HTML or text formats as follows. HTML Text iter8 report -o html > report.html # open report.html with a browser. In MacOS, you can use the command: # open report.html iter8 report -o text Useful variations of this experiment The values.yaml file in the experiment chart folder documents all the values that can be supplied during the experiment.","title":"4. View report"},{"location":"tutorials/load-test-http/loadcharacteristics/","text":"Load Characteristics \u00b6 Control the load characteristics during the HTTP load test experiment Control the load characteristics during the HTTP load test experiment by setting the number of queries/duration, the number of queries sent per second, and the number of parallel connections used to send requests. Follow the quick start tutorial . In the step where you run the experiment, replace the iter8 run command with either of the following commands. Number of queries \u00b6 Set the number of requests sent during the load-test to 200, the number of requests per second to 10, and the number of parallel connections used to send the requests to 5, as follows. iter8 run --set url = https://example.com \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 \\ --set numQueries = 200 \\ --set qps = 10 \\ --set connections = 5 Duration \u00b6 Set the duration of the load test to 20 sec, the number of requests per second to 10, and the number of parallel connections used to send the requests to 5, as follows. The duration value may be any Go duration string . iter8 run --set url = https://example.com \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 \\ --set duration = 20s \\ --set qps = 10 \\ --set connections = 5 When you set the numQueries and qps parameters, the duration of the load test is automatically determined. Similarly, when you set the duration and qps parameters, the number of requests is automatically determined. If you set both numQueries and duration parameters, the latter will be ignored.","title":"Load characteristics"},{"location":"tutorials/load-test-http/loadcharacteristics/#load-characteristics","text":"Control the load characteristics during the HTTP load test experiment Control the load characteristics during the HTTP load test experiment by setting the number of queries/duration, the number of queries sent per second, and the number of parallel connections used to send requests. Follow the quick start tutorial . In the step where you run the experiment, replace the iter8 run command with either of the following commands.","title":"Load Characteristics"},{"location":"tutorials/load-test-http/loadcharacteristics/#number-of-queries","text":"Set the number of requests sent during the load-test to 200, the number of requests per second to 10, and the number of parallel connections used to send the requests to 5, as follows. iter8 run --set url = https://example.com \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 \\ --set numQueries = 200 \\ --set qps = 10 \\ --set connections = 5","title":"Number of queries"},{"location":"tutorials/load-test-http/loadcharacteristics/#duration","text":"Set the duration of the load test to 20 sec, the number of requests per second to 10, and the number of parallel connections used to send the requests to 5, as follows. The duration value may be any Go duration string . iter8 run --set url = https://example.com \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 \\ --set duration = 20s \\ --set qps = 10 \\ --set connections = 5 When you set the numQueries and qps parameters, the duration of the load test is automatically determined. Similarly, when you set the duration and qps parameters, the number of requests is automatically determined. If you set both numQueries and duration parameters, the latter will be ignored.","title":"Duration"},{"location":"tutorials/load-test-http/metricsandslos/","text":"Metrics and SLOs \u00b6 Learn more about metrics and SLOs Learn more about the built-in metrics that are collected and the SLOs that are validated during the load test. By default, the following metrics are collected by load-test-http : error-count , error-rate , latency-mean , latency-max , latency-stddev , latency-min , and latency percentiles in the list [50.0, 75.0, 90.0, 95.0, 99.0, 99.9]. In addition, any other latency percentiles that are specified as part of SLOs are also collected. Follow the quick start tutorial . In the step where you run the experiment, replace the iter8 run command with the following command. iter8 run --set url = https://example.com \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 The above values ensure the following. The following latency percentiles are collected and reported: [25.0, 50.0, 75.0, 90.0, 95.0, 97.5, 99.0, 99.9] The following SLOs are validated. error rate is 0 mean latency is under 50 msec 90 th percentile latency is under 100 msec 97.5 th percentile latency is under 200 msec","title":"Metrics and SLOs"},{"location":"tutorials/load-test-http/metricsandslos/#metrics-and-slos","text":"Learn more about metrics and SLOs Learn more about the built-in metrics that are collected and the SLOs that are validated during the load test. By default, the following metrics are collected by load-test-http : error-count , error-rate , latency-mean , latency-max , latency-stddev , latency-min , and latency percentiles in the list [50.0, 75.0, 90.0, 95.0, 99.0, 99.9]. In addition, any other latency percentiles that are specified as part of SLOs are also collected. Follow the quick start tutorial . In the step where you run the experiment, replace the iter8 run command with the following command. iter8 run --set url = https://example.com \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 The above values ensure the following. The following latency percentiles are collected and reported: [25.0, 50.0, 75.0, 90.0, 95.0, 97.5, 99.0, 99.9] The following SLOs are validated. error rate is 0 mean latency is under 50 msec 90 th percentile latency is under 100 msec 97.5 th percentile latency is under 200 msec","title":"Metrics and SLOs"},{"location":"tutorials/load-test-http/overview/","text":"Overview \u00b6 Load Testing and SLO Validation for HTTP Services Iter8's HTTP load testing and SLO validation experiments can generate requests for HTTP services, collect built-in latency and error-related metrics, and validate service-level objectives (SLOs). Use-case: Continuous delivery (CD) of HTTP services is a motivating use-case for this experiment. If the HTTP service satisfies the SLOs specified in the experiment, it may be safely rolled out (for example, from a test environment to a production environment). This experiment is illustrated in the figure below. Examples \u00b6 Load test an HTTP service and validate SLOs (your first experiment) . Use an Iter8 experiment to load test an HTTP service and validate latency and error-related service level objectives (SLOs). Control the load characteristics . Control the load characteristics during the HTTP load test experiment by setting the number of queries/duration, the number of queries sent per second, and the number of parallel connections used to send requests. Send payload during the HTTP load test . While load testing an HTTP service with a POST endpoint, you may send any type of content as payload as part of the requests. Learn more about built-in metrics and SLOs . Learn more about the built-in metrics that are collected and the SLOs that are validated during the load test. Community examples \u00b6 These samples are contributed and maintained by members of the Iter8 community. Dear Iter8 community Community examples may become outdated. If you find that something is not working, lend a helping hand and fix it in a PR. More examples are always welcome. Knative \u00b6 Load test a Knative HTTP service Use an Iter8 experiment to load test a Knative HTTP service and validate latency and error-related service level objectives (SLOs).","title":"Overview"},{"location":"tutorials/load-test-http/overview/#overview","text":"Load Testing and SLO Validation for HTTP Services Iter8's HTTP load testing and SLO validation experiments can generate requests for HTTP services, collect built-in latency and error-related metrics, and validate service-level objectives (SLOs). Use-case: Continuous delivery (CD) of HTTP services is a motivating use-case for this experiment. If the HTTP service satisfies the SLOs specified in the experiment, it may be safely rolled out (for example, from a test environment to a production environment). This experiment is illustrated in the figure below.","title":"Overview"},{"location":"tutorials/load-test-http/overview/#examples","text":"Load test an HTTP service and validate SLOs (your first experiment) . Use an Iter8 experiment to load test an HTTP service and validate latency and error-related service level objectives (SLOs). Control the load characteristics . Control the load characteristics during the HTTP load test experiment by setting the number of queries/duration, the number of queries sent per second, and the number of parallel connections used to send requests. Send payload during the HTTP load test . While load testing an HTTP service with a POST endpoint, you may send any type of content as payload as part of the requests. Learn more about built-in metrics and SLOs . Learn more about the built-in metrics that are collected and the SLOs that are validated during the load test.","title":"Examples"},{"location":"tutorials/load-test-http/overview/#community-examples","text":"These samples are contributed and maintained by members of the Iter8 community. Dear Iter8 community Community examples may become outdated. If you find that something is not working, lend a helping hand and fix it in a PR. More examples are always welcome.","title":"Community examples"},{"location":"tutorials/load-test-http/overview/#knative","text":"Load test a Knative HTTP service Use an Iter8 experiment to load test a Knative HTTP service and validate latency and error-related service level objectives (SLOs).","title":"Knative"},{"location":"tutorials/load-test-http/payload/","text":"Payload \u00b6 Send various types of content as payload HTTP services with POST endpoints may accept payloads. Send various types of content as payload during the load test. Before you begin Install Iter8 . 1. Run sample app \u00b6 Run the httpbin sample app from a separate terminal. We will load test this app in this example. docker run -p 80 :80 kennethreitz/httpbin You may also use Podman or other alternatives to Docker in the above command. 2. Download experiment chart \u00b6 iter8 hub -e load-test-http cd load-test-http 3. Run experiment \u00b6 We will load test and validate the HTTP service whose URL is http://127.0.0.1/post . Iter8 enables you to send any type of content as payload during the load test, either by specifying the payload as a string ( payloadStr ), or by specifying a URL for Iter8 to fetch the payload from ( payloadURL ). Payload examples \u00b6 string (application/octet-stream) string (text/plain) URL (application/json) URL (image/jpeg) Supply a string as payload. This sets the content type to application/octet-stream . iter8 run --set url = http://127.0.0.1/post \\ --set payloadStr = \"abc123\" \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 Supply a string as payload and explicitly set the content type to text/plain . iter8 run --set url = http://127.0.0.1/post \\ --set payloadStr = \"abc123\" \\ --set contentType = \"text/plain\" \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 Fetch JSON content from a payload URL. Use this JSON as payload and explicitly set the content type to application/json . iter8 run --set url = http://127.0.0.1/post \\ --set payloadURL = https://data.police.uk/api/crimes-street-dates \\ --set contentType = \"application/json\" \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 Fetch jpeg image from a payload URL. Use this image as payload and explicitly set the content type to image/jpeg . iter8 run --set url = http://127.0.0.1/post \\ --set payloadURL = https://cdn.pixabay.com/photo/2021/09/08/17/58/poppy-6607526_1280.jpg \\ --set contentType = \"image/jpeg\" \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 Assert experiment outcomes and view reports as described in the quick start tutorial .","title":"Request payload"},{"location":"tutorials/load-test-http/payload/#payload","text":"Send various types of content as payload HTTP services with POST endpoints may accept payloads. Send various types of content as payload during the load test. Before you begin Install Iter8 .","title":"Payload"},{"location":"tutorials/load-test-http/payload/#1-run-sample-app","text":"Run the httpbin sample app from a separate terminal. We will load test this app in this example. docker run -p 80 :80 kennethreitz/httpbin You may also use Podman or other alternatives to Docker in the above command.","title":"1. Run sample app"},{"location":"tutorials/load-test-http/payload/#2-download-experiment-chart","text":"iter8 hub -e load-test-http cd load-test-http","title":"2. Download experiment chart"},{"location":"tutorials/load-test-http/payload/#3-run-experiment","text":"We will load test and validate the HTTP service whose URL is http://127.0.0.1/post . Iter8 enables you to send any type of content as payload during the load test, either by specifying the payload as a string ( payloadStr ), or by specifying a URL for Iter8 to fetch the payload from ( payloadURL ).","title":"3. Run experiment"},{"location":"tutorials/load-test-http/payload/#payload-examples","text":"string (application/octet-stream) string (text/plain) URL (application/json) URL (image/jpeg) Supply a string as payload. This sets the content type to application/octet-stream . iter8 run --set url = http://127.0.0.1/post \\ --set payloadStr = \"abc123\" \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 Supply a string as payload and explicitly set the content type to text/plain . iter8 run --set url = http://127.0.0.1/post \\ --set payloadStr = \"abc123\" \\ --set contentType = \"text/plain\" \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 Fetch JSON content from a payload URL. Use this JSON as payload and explicitly set the content type to application/json . iter8 run --set url = http://127.0.0.1/post \\ --set payloadURL = https://data.police.uk/api/crimes-street-dates \\ --set contentType = \"application/json\" \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 Fetch jpeg image from a payload URL. Use this image as payload and explicitly set the content type to image/jpeg . iter8 run --set url = http://127.0.0.1/post \\ --set payloadURL = https://cdn.pixabay.com/photo/2021/09/08/17/58/poppy-6607526_1280.jpg \\ --set contentType = \"image/jpeg\" \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 Assert experiment outcomes and view reports as described in the quick start tutorial .","title":"Payload examples"},{"location":"tutorials/load-test-http/community/knative/loadtest/","text":"Load test a Knative HTTP service \u00b6 Load test a Knative HTTP Service and validate SLOs Use an Iter8 experiment to load test a Knative HTTP service and validate latency and error-related service level objectives (SLOs). Use-case: Continuous delivery (CD) of HTTP services is a motivating use-case for this experiment. If the HTTP service satisfies the SLOs specified in the experiment, it may be safely rolled out (for example, from a test environment to a production environment). This experiment is illustrated in the figure below. Before you begin Install Iter8 . Install Knative and deploy your first Knative Service . As noted at the end of the Knative tutorial, when you curl the Knative service, curl http://hello.default.127.0.0.1.sslip.io you should see the expected output as follows. Hello World! 1. Download experiment chart \u00b6 Download the load-test-http experiment chart from Iter8 hub as follows. iter8 hub -e load-test-http cd load-test-http 2. Run experiment \u00b6 The iter8 run command combines an experiment chart with the supplied values to generate the experiment.yaml file, runs the experiment, and writes results into the result.yaml file. iter8 run --set url = http://hello.default.127.0.0.1.sslip.io \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200 3. Assert outcomes \u00b6 Assert that the experiment completed without any failures and SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos 4. View report \u00b6 View a report of the experiment in HTML or text formats as follows. HTML Text iter8 report -o html > report.html # open report.html with a browser. In MacOS, you can use the command: # open report.html iter8 report -o text Congratulations! You completed your Iter8-Knative experiment. Useful variations of this experiment Control the load characteristics during the HTTP load test experiment by setting the number of queries/duration, the number of queries sent per second, and the number of parallel connections used to send requests. HTTP services with POST endpoints may accept payloads. Send various types of content as payload during the load test. Learn more about the built-in metrics that are collected and the SLOs that are validated during the load test . The values.yaml file in the experiment chart folder documents all the values that can be supplied during the experiment.","title":"HTTP Service"},{"location":"tutorials/load-test-http/community/knative/loadtest/#load-test-a-knative-http-service","text":"Load test a Knative HTTP Service and validate SLOs Use an Iter8 experiment to load test a Knative HTTP service and validate latency and error-related service level objectives (SLOs). Use-case: Continuous delivery (CD) of HTTP services is a motivating use-case for this experiment. If the HTTP service satisfies the SLOs specified in the experiment, it may be safely rolled out (for example, from a test environment to a production environment). This experiment is illustrated in the figure below. Before you begin Install Iter8 . Install Knative and deploy your first Knative Service . As noted at the end of the Knative tutorial, when you curl the Knative service, curl http://hello.default.127.0.0.1.sslip.io you should see the expected output as follows. Hello World!","title":"Load test a Knative HTTP service"},{"location":"tutorials/load-test-http/community/knative/loadtest/#1-download-experiment-chart","text":"Download the load-test-http experiment chart from Iter8 hub as follows. iter8 hub -e load-test-http cd load-test-http","title":"1. Download experiment chart"},{"location":"tutorials/load-test-http/community/knative/loadtest/#2-run-experiment","text":"The iter8 run command combines an experiment chart with the supplied values to generate the experiment.yaml file, runs the experiment, and writes results into the result.yaml file. iter8 run --set url = http://hello.default.127.0.0.1.sslip.io \\ --set SLOs.error-rate = 0 \\ --set SLOs.latency-mean = 50 \\ --set SLOs.latency-p90 = 100 \\ --set SLOs.latency-p '97\\.5' = 200","title":"2. Run experiment"},{"location":"tutorials/load-test-http/community/knative/loadtest/#3-assert-outcomes","text":"Assert that the experiment completed without any failures and SLOs are satisfied. iter8 assert -c completed -c nofailure -c slos","title":"3. Assert outcomes"},{"location":"tutorials/load-test-http/community/knative/loadtest/#4-view-report","text":"View a report of the experiment in HTML or text formats as follows. HTML Text iter8 report -o html > report.html # open report.html with a browser. In MacOS, you can use the command: # open report.html iter8 report -o text Congratulations! You completed your Iter8-Knative experiment. Useful variations of this experiment Control the load characteristics during the HTTP load test experiment by setting the number of queries/duration, the number of queries sent per second, and the number of parallel connections used to send requests. HTTP services with POST endpoints may accept payloads. Send various types of content as payload during the load test. Learn more about the built-in metrics that are collected and the SLOs that are validated during the load test . The values.yaml file in the experiment chart folder documents all the values that can be supplied during the experiment.","title":"4. View report"},{"location":"user-guide/commands/iter8/","text":"iter8 \u00b6 Kubernetes release engineering made simple Synopsis \u00b6 Safely rollout new versions of apps and ML models. Maximize business value with each release. Environment variables: Name Description $LOG_LEVEL Iter8 log level. Values are: Trace, Debug, Info (default), Warning, Error, Fatal and Panic. Options \u00b6 -h, --help help for iter8 SEE ALSO \u00b6 iter8 assert - Assert if experiment result satisfies the specified conditions iter8 gen - Render templates with values iter8 hub - Download an experiment chart from Iter8 hub iter8 k - Work with experiments running in Kubernetes iter8 report - View report from experiment result iter8 run - Render experiment.yaml and run the experiment. iter8 version - Print Iter8 version information Auto generated by spf13/cobra on 3-Feb-2022 \u00b6","title":"iter8"},{"location":"user-guide/commands/iter8/#iter8","text":"Kubernetes release engineering made simple","title":"iter8"},{"location":"user-guide/commands/iter8/#synopsis","text":"Safely rollout new versions of apps and ML models. Maximize business value with each release. Environment variables: Name Description $LOG_LEVEL Iter8 log level. Values are: Trace, Debug, Info (default), Warning, Error, Fatal and Panic.","title":"Synopsis"},{"location":"user-guide/commands/iter8/#options","text":"-h, --help help for iter8","title":"Options"},{"location":"user-guide/commands/iter8/#see-also","text":"iter8 assert - Assert if experiment result satisfies the specified conditions iter8 gen - Render templates with values iter8 hub - Download an experiment chart from Iter8 hub iter8 k - Work with experiments running in Kubernetes iter8 report - View report from experiment result iter8 run - Render experiment.yaml and run the experiment. iter8 version - Print Iter8 version information","title":"SEE ALSO"},{"location":"user-guide/commands/iter8/#auto-generated-by-spf13cobra-on-3-feb-2022","text":"","title":"Auto generated by spf13/cobra on 3-Feb-2022"},{"location":"user-guide/commands/iter8_assert/","text":"iter8 assert \u00b6 Assert if experiment result satisfies the specified conditions Synopsis \u00b6 Assert if experiment result satisfies the specified conditions. If assert conditions are satisfied, exit with code 0. Else, exit with code 1. Assertions are especially useful within CI/CD/GitOps pipelines. iter8 assert [flags] Examples \u00b6 # assert that the experiment completed without failures, # and SLOs were satisfied iter8 assert -c completed -c nofailure -c slos # another way to write the above assertion iter8 assert -c completed,nofailure,slos # if the experiment involves multiple app versions, # SLOs can be asserted for individual versions # for example, the following command asserts that # SLOs are satisfied by version numbered 0 iter8 assert -c completed,nofailures,slosby=0 # timeouts are useful for an experiment that may be long running # and may run in the background iter8 assert -c completed,nofailures,slosby=0 -t 5s Options \u00b6 -c, --condition(s); can specify multiple or separate conditions with commas; strings completed | nofailure | slos | slosby=<version number> -h, --help help for assert -t, --timeout duration timeout duration (e.g., 5s) SEE ALSO \u00b6 iter8 - Kubernetes release engineering made simple Auto generated by spf13/cobra on 3-Feb-2022 \u00b6","title":"iter8 assert"},{"location":"user-guide/commands/iter8_assert/#iter8-assert","text":"Assert if experiment result satisfies the specified conditions","title":"iter8 assert"},{"location":"user-guide/commands/iter8_assert/#synopsis","text":"Assert if experiment result satisfies the specified conditions. If assert conditions are satisfied, exit with code 0. Else, exit with code 1. Assertions are especially useful within CI/CD/GitOps pipelines. iter8 assert [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_assert/#examples","text":"# assert that the experiment completed without failures, # and SLOs were satisfied iter8 assert -c completed -c nofailure -c slos # another way to write the above assertion iter8 assert -c completed,nofailure,slos # if the experiment involves multiple app versions, # SLOs can be asserted for individual versions # for example, the following command asserts that # SLOs are satisfied by version numbered 0 iter8 assert -c completed,nofailures,slosby=0 # timeouts are useful for an experiment that may be long running # and may run in the background iter8 assert -c completed,nofailures,slosby=0 -t 5s","title":"Examples"},{"location":"user-guide/commands/iter8_assert/#options","text":"-c, --condition(s); can specify multiple or separate conditions with commas; strings completed | nofailure | slos | slosby=<version number> -h, --help help for assert -t, --timeout duration timeout duration (e.g., 5s)","title":"Options"},{"location":"user-guide/commands/iter8_assert/#see-also","text":"iter8 - Kubernetes release engineering made simple","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_assert/#auto-generated-by-spf13cobra-on-3-feb-2022","text":"","title":"Auto generated by spf13/cobra on 3-Feb-2022"},{"location":"user-guide/commands/iter8_gen/","text":"iter8 gen \u00b6 Render templates with values Synopsis \u00b6 Render templates with values Options \u00b6 -h, --help help for gen --set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -f, --values strings specify values in a YAML file or a URL (can specify multiple) SEE ALSO \u00b6 iter8 - Kubernetes release engineering made simple iter8 gen k8s - Generate manifest for running experiment in Kubernetes Auto generated by spf13/cobra on 3-Feb-2022 \u00b6","title":"iter8 gen"},{"location":"user-guide/commands/iter8_gen/#iter8-gen","text":"Render templates with values","title":"iter8 gen"},{"location":"user-guide/commands/iter8_gen/#synopsis","text":"Render templates with values","title":"Synopsis"},{"location":"user-guide/commands/iter8_gen/#options","text":"-h, --help help for gen --set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -f, --values strings specify values in a YAML file or a URL (can specify multiple)","title":"Options"},{"location":"user-guide/commands/iter8_gen/#see-also","text":"iter8 - Kubernetes release engineering made simple iter8 gen k8s - Generate manifest for running experiment in Kubernetes","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_gen/#auto-generated-by-spf13cobra-on-3-feb-2022","text":"","title":"Auto generated by spf13/cobra on 3-Feb-2022"},{"location":"user-guide/commands/iter8_gen_k8s/","text":"iter8 gen k8s \u00b6 Generate manifest for running experiment in Kubernetes iter8 gen k8s [flags] Examples \u00b6 # Generate Kubernetes manifest iter8 gen k8s Options \u00b6 -a, --app string app to be associated with an experiment (default \"default\") -h, --help help for k8s -i, --id string if not specified, a randomly generated identifier will be used Options inherited from parent commands \u00b6 --set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -f, --values strings specify values in a YAML file or a URL (can specify multiple) SEE ALSO \u00b6 iter8 gen - Render templates with values Auto generated by spf13/cobra on 3-Feb-2022 \u00b6","title":"iter8 gen k8s"},{"location":"user-guide/commands/iter8_gen_k8s/#iter8-gen-k8s","text":"Generate manifest for running experiment in Kubernetes iter8 gen k8s [flags]","title":"iter8 gen k8s"},{"location":"user-guide/commands/iter8_gen_k8s/#examples","text":"# Generate Kubernetes manifest iter8 gen k8s","title":"Examples"},{"location":"user-guide/commands/iter8_gen_k8s/#options","text":"-a, --app string app to be associated with an experiment (default \"default\") -h, --help help for k8s -i, --id string if not specified, a randomly generated identifier will be used","title":"Options"},{"location":"user-guide/commands/iter8_gen_k8s/#options-inherited-from-parent-commands","text":"--set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -f, --values strings specify values in a YAML file or a URL (can specify multiple)","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_gen_k8s/#see-also","text":"iter8 gen - Render templates with values","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_gen_k8s/#auto-generated-by-spf13cobra-on-3-feb-2022","text":"","title":"Auto generated by spf13/cobra on 3-Feb-2022"},{"location":"user-guide/commands/iter8_hub/","text":"iter8 hub \u00b6 Download an experiment chart from Iter8 hub Synopsis \u00b6 Download an experiment chart from the Iter8 hub. This is useful for fetching experiments to inspect, modify, run, or repackage. By default, this command looks for the specified experiment chart in the public Iter8 hub. It is also possible to use third party hubs by setting the ITER8HUB environment variable. Environment variables: Name Description $ITER8HUB Iter8 hub location. Default value: github.com/iter8-tools/iter8.git//hub The Iter8 hub location follows the following syntax: HOST/OWNER/REPO[?ref=branch]//path-to-experiment-folder-relative-to-root-of-the-repo For example, the public Iter8 hub is located at: github.com/iter8-tools/iter8.git?ref=master//hub iter8 hub [flags] Examples \u00b6 # download the load-test-http experiment chart from the public Iter8 hub iter8 hub -e load-test-http # custom Iter8 hubs are simply github repos that host Iter8 experiment charts # Suppose you forked github.com/iter8-tools/iter8 under the GitHub account $GHUSER, # created a branch called 'ml', and pushed a new experiment chart # called 'tensorflow' under the path 'my/path/to/hub'. # It can now be downloaded as follows. export ITER8HUB=github.com/$GHUSER/iter8.git?ref=ml//my/path/to/hub iter8 hub -e tensorflow Options \u00b6 -e, --experiment string valid experiment chart located under hub -h, --help help for hub SEE ALSO \u00b6 iter8 - Kubernetes release engineering made simple Auto generated by spf13/cobra on 3-Feb-2022 \u00b6","title":"iter8 hub"},{"location":"user-guide/commands/iter8_hub/#iter8-hub","text":"Download an experiment chart from Iter8 hub","title":"iter8 hub"},{"location":"user-guide/commands/iter8_hub/#synopsis","text":"Download an experiment chart from the Iter8 hub. This is useful for fetching experiments to inspect, modify, run, or repackage. By default, this command looks for the specified experiment chart in the public Iter8 hub. It is also possible to use third party hubs by setting the ITER8HUB environment variable. Environment variables: Name Description $ITER8HUB Iter8 hub location. Default value: github.com/iter8-tools/iter8.git//hub The Iter8 hub location follows the following syntax: HOST/OWNER/REPO[?ref=branch]//path-to-experiment-folder-relative-to-root-of-the-repo For example, the public Iter8 hub is located at: github.com/iter8-tools/iter8.git?ref=master//hub iter8 hub [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_hub/#examples","text":"# download the load-test-http experiment chart from the public Iter8 hub iter8 hub -e load-test-http # custom Iter8 hubs are simply github repos that host Iter8 experiment charts # Suppose you forked github.com/iter8-tools/iter8 under the GitHub account $GHUSER, # created a branch called 'ml', and pushed a new experiment chart # called 'tensorflow' under the path 'my/path/to/hub'. # It can now be downloaded as follows. export ITER8HUB=github.com/$GHUSER/iter8.git?ref=ml//my/path/to/hub iter8 hub -e tensorflow","title":"Examples"},{"location":"user-guide/commands/iter8_hub/#options","text":"-e, --experiment string valid experiment chart located under hub -h, --help help for hub","title":"Options"},{"location":"user-guide/commands/iter8_hub/#see-also","text":"iter8 - Kubernetes release engineering made simple","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_hub/#auto-generated-by-spf13cobra-on-3-feb-2022","text":"","title":"Auto generated by spf13/cobra on 3-Feb-2022"},{"location":"user-guide/commands/iter8_k/","text":"iter8 k \u00b6 Work with experiments running in Kubernetes Examples \u00b6 To generate a Kubernetes manifest for an experiment in 'experiment.yaml', and run it in Kubernetes, do: iter8 gen k8s | kubectl apply -f - Options \u00b6 --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --cache-dir string Default cache directory (default \"/Users/srinivasanparthasarathy/.kube/cache\") --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for k --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to the kubeconfig file to use for CLI requests. -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") -s, --server string The address and port of the Kubernetes API server --tls-server-name string Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server SEE ALSO \u00b6 iter8 - Kubernetes release engineering made simple iter8 k assert - Assert if experiment result satisfies the specified conditions iter8 k delete - Delete an experiment iter8 k get - Get the list of experiments running in Kubernetes iter8 k logs - Get logs of an experiment in Kubernetes iter8 k report - View report from experiment result Auto generated by spf13/cobra on 3-Feb-2022 \u00b6","title":"iter8 k"},{"location":"user-guide/commands/iter8_k/#iter8-k","text":"Work with experiments running in Kubernetes","title":"iter8 k"},{"location":"user-guide/commands/iter8_k/#examples","text":"To generate a Kubernetes manifest for an experiment in 'experiment.yaml', and run it in Kubernetes, do: iter8 gen k8s | kubectl apply -f -","title":"Examples"},{"location":"user-guide/commands/iter8_k/#options","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --cache-dir string Default cache directory (default \"/Users/srinivasanparthasarathy/.kube/cache\") --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use -h, --help help for k --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to the kubeconfig file to use for CLI requests. -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") -s, --server string The address and port of the Kubernetes API server --tls-server-name string Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options"},{"location":"user-guide/commands/iter8_k/#see-also","text":"iter8 - Kubernetes release engineering made simple iter8 k assert - Assert if experiment result satisfies the specified conditions iter8 k delete - Delete an experiment iter8 k get - Get the list of experiments running in Kubernetes iter8 k logs - Get logs of an experiment in Kubernetes iter8 k report - View report from experiment result","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_k/#auto-generated-by-spf13cobra-on-3-feb-2022","text":"","title":"Auto generated by spf13/cobra on 3-Feb-2022"},{"location":"user-guide/commands/iter8_k_assert/","text":"iter8 k assert \u00b6 Assert if experiment result satisfies the specified conditions Synopsis \u00b6 Assert if experiment result satisfies the specified conditions. If assert conditions are satisfied, exit with code 0. Else, exit with code 1. Assertions are especially useful within CI/CD/GitOps pipelines. iter8 k assert [flags] Examples \u00b6 # Assert that the most recent experiment has completed # without failure and its SLOs were satisfied for all versions iter8 k assert -c completed -c nofailure -c slos # Another way to express the same assertion iter8 k assert -c completed,nofailure,slos # Make assertion about the most recent experiment with app label $APP iter8 k assert -a $APP -c completed,nofailure,slos # For experiments with multiple versions, specify that the SLOs for one version were satisfied iter8 k assert -c completed,nofailure,slosby=0 # The above assertion for an experiment with identifier $ID iter8 k assert --id $ID -c completed,nofailure,slosby=0 # The above assertion with a runtime timeout iter8 k assert --id $ID -c completed,nofailure,slosby=0 -t 5s Options \u00b6 -a, --app string app label; this flag is ignored if --id flag is specified -c, --condition(s); can specify multiple or separate conditions with commas; strings completed | nofailure | slos | slosby=<version number> -h, --help help for assert -i, --id string experiment identifier; if not specified, the most recent experiment is used -t, --timeout duration timeout duration (e.g., 5s) Options inherited from parent commands \u00b6 --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --cache-dir string Default cache directory (default \"/Users/srinivasanparthasarathy/.kube/cache\") --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to the kubeconfig file to use for CLI requests. -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") -s, --server string The address and port of the Kubernetes API server --tls-server-name string Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server SEE ALSO \u00b6 iter8 k - Work with experiments running in Kubernetes Auto generated by spf13/cobra on 3-Feb-2022 \u00b6","title":"iter8 k assert"},{"location":"user-guide/commands/iter8_k_assert/#iter8-k-assert","text":"Assert if experiment result satisfies the specified conditions","title":"iter8 k assert"},{"location":"user-guide/commands/iter8_k_assert/#synopsis","text":"Assert if experiment result satisfies the specified conditions. If assert conditions are satisfied, exit with code 0. Else, exit with code 1. Assertions are especially useful within CI/CD/GitOps pipelines. iter8 k assert [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_k_assert/#examples","text":"# Assert that the most recent experiment has completed # without failure and its SLOs were satisfied for all versions iter8 k assert -c completed -c nofailure -c slos # Another way to express the same assertion iter8 k assert -c completed,nofailure,slos # Make assertion about the most recent experiment with app label $APP iter8 k assert -a $APP -c completed,nofailure,slos # For experiments with multiple versions, specify that the SLOs for one version were satisfied iter8 k assert -c completed,nofailure,slosby=0 # The above assertion for an experiment with identifier $ID iter8 k assert --id $ID -c completed,nofailure,slosby=0 # The above assertion with a runtime timeout iter8 k assert --id $ID -c completed,nofailure,slosby=0 -t 5s","title":"Examples"},{"location":"user-guide/commands/iter8_k_assert/#options","text":"-a, --app string app label; this flag is ignored if --id flag is specified -c, --condition(s); can specify multiple or separate conditions with commas; strings completed | nofailure | slos | slosby=<version number> -h, --help help for assert -i, --id string experiment identifier; if not specified, the most recent experiment is used -t, --timeout duration timeout duration (e.g., 5s)","title":"Options"},{"location":"user-guide/commands/iter8_k_assert/#options-inherited-from-parent-commands","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --cache-dir string Default cache directory (default \"/Users/srinivasanparthasarathy/.kube/cache\") --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to the kubeconfig file to use for CLI requests. -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") -s, --server string The address and port of the Kubernetes API server --tls-server-name string Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_k_assert/#see-also","text":"iter8 k - Work with experiments running in Kubernetes","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_k_assert/#auto-generated-by-spf13cobra-on-3-feb-2022","text":"","title":"Auto generated by spf13/cobra on 3-Feb-2022"},{"location":"user-guide/commands/iter8_k_delete/","text":"iter8 k delete \u00b6 Delete an experiment iter8 k delete [flags] Examples \u00b6 # Delete the most recent experiment iter8 k delete # Delete the most recent experiment with app label $APP iter8 k delete -a $APP # Delete experient with identifier $ID iter8 k delete --id $ID Options \u00b6 -a, --app string app label; this flag is ignored if --id flag is specified -h, --help help for delete -i, --id string experiment identifier; if not specified, the most recent experiment is used Options inherited from parent commands \u00b6 --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --cache-dir string Default cache directory (default \"/Users/srinivasanparthasarathy/.kube/cache\") --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to the kubeconfig file to use for CLI requests. -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") -s, --server string The address and port of the Kubernetes API server --tls-server-name string Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server SEE ALSO \u00b6 iter8 k - Work with experiments running in Kubernetes Auto generated by spf13/cobra on 3-Feb-2022 \u00b6","title":"iter8 k delete"},{"location":"user-guide/commands/iter8_k_delete/#iter8-k-delete","text":"Delete an experiment iter8 k delete [flags]","title":"iter8 k delete"},{"location":"user-guide/commands/iter8_k_delete/#examples","text":"# Delete the most recent experiment iter8 k delete # Delete the most recent experiment with app label $APP iter8 k delete -a $APP # Delete experient with identifier $ID iter8 k delete --id $ID","title":"Examples"},{"location":"user-guide/commands/iter8_k_delete/#options","text":"-a, --app string app label; this flag is ignored if --id flag is specified -h, --help help for delete -i, --id string experiment identifier; if not specified, the most recent experiment is used","title":"Options"},{"location":"user-guide/commands/iter8_k_delete/#options-inherited-from-parent-commands","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --cache-dir string Default cache directory (default \"/Users/srinivasanparthasarathy/.kube/cache\") --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to the kubeconfig file to use for CLI requests. -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") -s, --server string The address and port of the Kubernetes API server --tls-server-name string Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_k_delete/#see-also","text":"iter8 k - Work with experiments running in Kubernetes","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_k_delete/#auto-generated-by-spf13cobra-on-3-feb-2022","text":"","title":"Auto generated by spf13/cobra on 3-Feb-2022"},{"location":"user-guide/commands/iter8_k_get/","text":"iter8 k get \u00b6 Get the list of experiments running in Kubernetes iter8 k get [flags] Examples \u00b6 # Get the list of experiments running in Kubernetes iter8 k get # Get list of experiments with app label $APP iter8 k get -a $APP Options \u00b6 -a, --app string app label; this flag is ignored if --id flag is specified -h, --help help for get -i, --id string experiment identifier; if not specified, the most recent experiment is used Options inherited from parent commands \u00b6 --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --cache-dir string Default cache directory (default \"/Users/srinivasanparthasarathy/.kube/cache\") --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to the kubeconfig file to use for CLI requests. -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") -s, --server string The address and port of the Kubernetes API server --tls-server-name string Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server SEE ALSO \u00b6 iter8 k - Work with experiments running in Kubernetes Auto generated by spf13/cobra on 3-Feb-2022 \u00b6","title":"iter8 k get"},{"location":"user-guide/commands/iter8_k_get/#iter8-k-get","text":"Get the list of experiments running in Kubernetes iter8 k get [flags]","title":"iter8 k get"},{"location":"user-guide/commands/iter8_k_get/#examples","text":"# Get the list of experiments running in Kubernetes iter8 k get # Get list of experiments with app label $APP iter8 k get -a $APP","title":"Examples"},{"location":"user-guide/commands/iter8_k_get/#options","text":"-a, --app string app label; this flag is ignored if --id flag is specified -h, --help help for get -i, --id string experiment identifier; if not specified, the most recent experiment is used","title":"Options"},{"location":"user-guide/commands/iter8_k_get/#options-inherited-from-parent-commands","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --cache-dir string Default cache directory (default \"/Users/srinivasanparthasarathy/.kube/cache\") --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to the kubeconfig file to use for CLI requests. -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") -s, --server string The address and port of the Kubernetes API server --tls-server-name string Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_k_get/#see-also","text":"iter8 k - Work with experiments running in Kubernetes","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_k_get/#auto-generated-by-spf13cobra-on-3-feb-2022","text":"","title":"Auto generated by spf13/cobra on 3-Feb-2022"},{"location":"user-guide/commands/iter8_k_logs/","text":"iter8 k logs \u00b6 Get logs of an experiment in Kubernetes iter8 k logs [flags] Examples \u00b6 # Get logs of the most recent experiment started in Kubernetes iter8 k logs # Get logs of the most recent experiment with app label $APP iter8 k logs -a $APP # Get logs of the experiment in Kubernetes with identifier $ID iter8 k logs --id $ID Options \u00b6 -a, --app string app label; this flag is ignored if --id flag is specified -h, --help help for logs -i, --id string experiment identifier; if not specified, the most recent experiment is used Options inherited from parent commands \u00b6 --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --cache-dir string Default cache directory (default \"/Users/srinivasanparthasarathy/.kube/cache\") --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to the kubeconfig file to use for CLI requests. -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") -s, --server string The address and port of the Kubernetes API server --tls-server-name string Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server SEE ALSO \u00b6 iter8 k - Work with experiments running in Kubernetes Auto generated by spf13/cobra on 3-Feb-2022 \u00b6","title":"iter8 k logs"},{"location":"user-guide/commands/iter8_k_logs/#iter8-k-logs","text":"Get logs of an experiment in Kubernetes iter8 k logs [flags]","title":"iter8 k logs"},{"location":"user-guide/commands/iter8_k_logs/#examples","text":"# Get logs of the most recent experiment started in Kubernetes iter8 k logs # Get logs of the most recent experiment with app label $APP iter8 k logs -a $APP # Get logs of the experiment in Kubernetes with identifier $ID iter8 k logs --id $ID","title":"Examples"},{"location":"user-guide/commands/iter8_k_logs/#options","text":"-a, --app string app label; this flag is ignored if --id flag is specified -h, --help help for logs -i, --id string experiment identifier; if not specified, the most recent experiment is used","title":"Options"},{"location":"user-guide/commands/iter8_k_logs/#options-inherited-from-parent-commands","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --cache-dir string Default cache directory (default \"/Users/srinivasanparthasarathy/.kube/cache\") --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to the kubeconfig file to use for CLI requests. -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") -s, --server string The address and port of the Kubernetes API server --tls-server-name string Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_k_logs/#see-also","text":"iter8 k - Work with experiments running in Kubernetes","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_k_logs/#auto-generated-by-spf13cobra-on-3-feb-2022","text":"","title":"Auto generated by spf13/cobra on 3-Feb-2022"},{"location":"user-guide/commands/iter8_k_report/","text":"iter8 k report \u00b6 View report from experiment result Synopsis \u00b6 View report from experiment result iter8 k report [flags] Examples \u00b6 # View a text report for the most recent experiment started in Kubernetes iter8 k report # View an html report for the most recent experiment iter8 k report -o html # View an html report for the most recent experiment with app label $APP iter8 k report -o html -a $APP # View an html report the experiment with identifier $ID iter8 k report -o html --id $ID Options \u00b6 -a, --app string app label; this flag is ignored if --id flag is specified -h, --help help for report -i, --id string experiment identifier; if not specified, the most recent experiment is used -o, --outputFormat string text | html (default \"text\") Options inherited from parent commands \u00b6 --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --cache-dir string Default cache directory (default \"/Users/srinivasanparthasarathy/.kube/cache\") --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to the kubeconfig file to use for CLI requests. -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") -s, --server string The address and port of the Kubernetes API server --tls-server-name string Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server SEE ALSO \u00b6 iter8 k - Work with experiments running in Kubernetes Auto generated by spf13/cobra on 3-Feb-2022 \u00b6","title":"iter8 k report"},{"location":"user-guide/commands/iter8_k_report/#iter8-k-report","text":"View report from experiment result","title":"iter8 k report"},{"location":"user-guide/commands/iter8_k_report/#synopsis","text":"View report from experiment result iter8 k report [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_k_report/#examples","text":"# View a text report for the most recent experiment started in Kubernetes iter8 k report # View an html report for the most recent experiment iter8 k report -o html # View an html report for the most recent experiment with app label $APP iter8 k report -o html -a $APP # View an html report the experiment with identifier $ID iter8 k report -o html --id $ID","title":"Examples"},{"location":"user-guide/commands/iter8_k_report/#options","text":"-a, --app string app label; this flag is ignored if --id flag is specified -h, --help help for report -i, --id string experiment identifier; if not specified, the most recent experiment is used -o, --outputFormat string text | html (default \"text\")","title":"Options"},{"location":"user-guide/commands/iter8_k_report/#options-inherited-from-parent-commands","text":"--as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --cache-dir string Default cache directory (default \"/Users/srinivasanparthasarathy/.kube/cache\") --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to the kubeconfig file to use for CLI requests. -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") -s, --server string The address and port of the Kubernetes API server --tls-server-name string Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"user-guide/commands/iter8_k_report/#see-also","text":"iter8 k - Work with experiments running in Kubernetes","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_k_report/#auto-generated-by-spf13cobra-on-3-feb-2022","text":"","title":"Auto generated by spf13/cobra on 3-Feb-2022"},{"location":"user-guide/commands/iter8_report/","text":"iter8 report \u00b6 View report from experiment result Synopsis \u00b6 View report from experiment result iter8 report [flags] Examples \u00b6 # view text report iter8 report # view html report iter8 report -o html Options \u00b6 -h, --help help for report -o, --outputFormat string text | html (default \"text\") SEE ALSO \u00b6 iter8 - Kubernetes release engineering made simple Auto generated by spf13/cobra on 3-Feb-2022 \u00b6","title":"iter8 report"},{"location":"user-guide/commands/iter8_report/#iter8-report","text":"View report from experiment result","title":"iter8 report"},{"location":"user-guide/commands/iter8_report/#synopsis","text":"View report from experiment result iter8 report [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_report/#examples","text":"# view text report iter8 report # view html report iter8 report -o html","title":"Examples"},{"location":"user-guide/commands/iter8_report/#options","text":"-h, --help help for report -o, --outputFormat string text | html (default \"text\")","title":"Options"},{"location":"user-guide/commands/iter8_report/#see-also","text":"iter8 - Kubernetes release engineering made simple","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_report/#auto-generated-by-spf13cobra-on-3-feb-2022","text":"","title":"Auto generated by spf13/cobra on 3-Feb-2022"},{"location":"user-guide/commands/iter8_run/","text":"iter8 run \u00b6 Render experiment.yaml and run the experiment. Synopsis \u00b6 Render the file named \"experiment.yaml\" by combining an experiment chart with values, and run the experiment. This command is intended to be executed from the root of an Iter8 experiment chart. Values may be specified and are processed in the same manner as they are for Helm charts. iter8 run [flags] Examples \u00b6 # Render experiment.yaml and run the experiment iter8 run --set url=https://example.com \\ --set SLOs.error-rate=0 \\ --set SLOs.latency-mean=50 \\ --set SLOs.latency-p90=100 \\ --set SLOs.latency-p'97\\.5'=200 Options \u00b6 --dry render experiment.yaml without running the experiment -h, --help help for run --set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -f, --values strings specify values in a YAML file or a URL (can specify multiple) SEE ALSO \u00b6 iter8 - Kubernetes release engineering made simple Auto generated by spf13/cobra on 3-Feb-2022 \u00b6","title":"iter8 run"},{"location":"user-guide/commands/iter8_run/#iter8-run","text":"Render experiment.yaml and run the experiment.","title":"iter8 run"},{"location":"user-guide/commands/iter8_run/#synopsis","text":"Render the file named \"experiment.yaml\" by combining an experiment chart with values, and run the experiment. This command is intended to be executed from the root of an Iter8 experiment chart. Values may be specified and are processed in the same manner as they are for Helm charts. iter8 run [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_run/#examples","text":"# Render experiment.yaml and run the experiment iter8 run --set url=https://example.com \\ --set SLOs.error-rate=0 \\ --set SLOs.latency-mean=50 \\ --set SLOs.latency-p90=100 \\ --set SLOs.latency-p'97\\.5'=200","title":"Examples"},{"location":"user-guide/commands/iter8_run/#options","text":"--dry render experiment.yaml without running the experiment -h, --help help for run --set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -f, --values strings specify values in a YAML file or a URL (can specify multiple)","title":"Options"},{"location":"user-guide/commands/iter8_run/#see-also","text":"iter8 - Kubernetes release engineering made simple","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_run/#auto-generated-by-spf13cobra-on-3-feb-2022","text":"","title":"Auto generated by spf13/cobra on 3-Feb-2022"},{"location":"user-guide/commands/iter8_version/","text":"iter8 version \u00b6 Print Iter8 version information Synopsis \u00b6 Show the version for Iter8. iter8 version [flags] Examples \u00b6 iter8 version # The output will look like this: # version.BuildInfo{Version:\"v0.8.10\", GitCommit:\"fe51cd1e31e6a202cba7aliv9552a6d418ded79a\", GitTreeState:\"clean\", GoVersion:\"go1.16.10\"} # - Version is the semantic version of the release. # - GitCommit is the SHA for the commit that this version was built from. # - GitTreeState is \"clean\" if there are no local code changes when this binary was # built, and \"dirty\" if the binary was built from locally modified code. # - GoVersion is the version of Go that was used to compile Iter8. Options \u00b6 -h, --help help for version --short print the version number SEE ALSO \u00b6 iter8 - Kubernetes release engineering made simple Auto generated by spf13/cobra on 3-Feb-2022 \u00b6","title":"iter8 version"},{"location":"user-guide/commands/iter8_version/#iter8-version","text":"Print Iter8 version information","title":"iter8 version"},{"location":"user-guide/commands/iter8_version/#synopsis","text":"Show the version for Iter8. iter8 version [flags]","title":"Synopsis"},{"location":"user-guide/commands/iter8_version/#examples","text":"iter8 version # The output will look like this: # version.BuildInfo{Version:\"v0.8.10\", GitCommit:\"fe51cd1e31e6a202cba7aliv9552a6d418ded79a\", GitTreeState:\"clean\", GoVersion:\"go1.16.10\"} # - Version is the semantic version of the release. # - GitCommit is the SHA for the commit that this version was built from. # - GitTreeState is \"clean\" if there are no local code changes when this binary was # built, and \"dirty\" if the binary was built from locally modified code. # - GoVersion is the version of Go that was used to compile Iter8.","title":"Examples"},{"location":"user-guide/commands/iter8_version/#options","text":"-h, --help help for version --short print the version number","title":"Options"},{"location":"user-guide/commands/iter8_version/#see-also","text":"iter8 - Kubernetes release engineering made simple","title":"SEE ALSO"},{"location":"user-guide/commands/iter8_version/#auto-generated-by-spf13cobra-on-3-feb-2022","text":"","title":"Auto generated by spf13/cobra on 3-Feb-2022"}]}